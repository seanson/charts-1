{{- if ne (index .Values.cloudsql.instances 0).instance "instance" }}
{{- $hasCredentials := include "gcloud-sqlproxy.hasCredentials" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "gcloud-sqlproxy.fullname" . }}
  labels:
    {{- include "gcloud-sqlproxy.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicasCount }}
{{- end }}
  selector:
    matchLabels:
      {{- include "gcloud-sqlproxy.selectorLabels" . | nindent 6 }}
  strategy:
{{ toYaml .Values.deploymentStrategy | indent 4 }}
  template:
    metadata:
      labels:
        {{- include "gcloud-sqlproxy.selectorLabels" . | nindent 8 }}
      annotations:
{{ toYaml .Values.podAnnotations | indent 8 }}
    spec:
      serviceAccountName: {{ template "gcloud-sqlproxy.serviceAccountName" . }}
      {{- if .Values.priorityClassName }}
      priorityClassName: "{{ .Values.priorityClassName }}"
      {{- end }}
      containers:
      - name: sqlproxy
        image: "{{ .Values.image }}:{{ .Values.imageTag }}"
        imagePullPolicy: {{ default "" .Values.imagePullPolicy | quote }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        command:
        - /cloud_sql_proxy
        - --dir=/cloudsql
        - -instances={{- range $index, $value := .Values.cloudsql.instances -}}
                        {{- if .secure -}}
                        {{ .project }}:{{ .region }}:{{ .instance }}=tcp:127.0.0.1:{{ add 10000 .port }},
                        {{- else -}}
                        {{ .project }}:{{ .region }}:{{ .instance }}=tcp:0.0.0.0:{{ .port }},
                        {{- end -}}
                     {{- end }}
        {{ if $hasCredentials -}}
        - -credential_file=/secrets/cloudsql/{{ include "gcloud-sqlproxy.secretKey" . }}
        {{ end -}}
        {{- range $key, $value := .Values.extraArgs }}
        - --{{ $key }}={{ $value }}
        {{- end }}
        {{- if .Values.lifecycleHooks }}
        lifecycle:
{{ toYaml .Values.lifecycleHooks | indent 10 }}
        {{- end }}
        ports:
        {{- range .Values.cloudsql.instances }}
        {{- if .secure }}
        - name: {{ .instanceShortName | default (.instance | trunc 15) }}
          containerPort: {{ add 10000 .port }}
        {{- else }}
        - name: {{ .instanceShortName | default (.instance | trunc 15) }}
          containerPort: {{ .port }}
        {{- end }}
        {{- end }}
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          tcpSocket:
            port: {{ .Values.livenessProbe.port }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          tcpSocket:
            port: {{ .Values.readinessProbe.port }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        {{- end }}
        volumeMounts:
        {{ if $hasCredentials -}}
        - name: cloudsql-oauth-credentials
          mountPath: /secrets/cloudsql
        {{ end -}}
        - name: cloudsql
          mountPath: /cloudsql
{{- range $index, $value := .Values.cloudsql.instances -}}
{{- if .secure }}
      - name: pgbouncer-{{ $index }}
        image: "{{ $.Values.pgbouncer.image }}:{{ $.Values.pgbouncer.imageTag }}"
        imagePullPolicy: {{ default "" $.Values.pgbouncer.imagePullPolicy | quote }}
        command:
        - /pgbouncer/bin/pgbouncer
        - -u
        - nobody
        - /config/pgbouncer.ini
        ports:
        - name: pgbouncer-{{ $index }}
          containerPort: {{ .port }}
        volumeMounts:
        - name: pgbouncer-config-{{ $index }}
          mountPath: /config
        {{- if $.Values.pgbouncer.selfSignedCertificate.enabled }}
        - name: pgbouncer-tls-certificate
          mountPath: /secrets/sqltunnel
        {{ end -}}
{{- end }}
{{- end }}
      volumes:
      {{ if $hasCredentials -}}
      - name: cloudsql-oauth-credentials
        secret:
          secretName: {{ include "gcloud-sqlproxy.secretName" . }}
      {{ end -}}
      {{ if .Values.pgbouncer.selfSignedCertificate.enabled -}}
      - name: pgbouncer-tls-certificate
        secret:
          secretName: tls-{{ include "gcloud-sqlproxy.secretName" . }}
      {{ end -}}
{{- range $index, $value := .Values.cloudsql.instances -}}
{{- if .secure }}
      - name: pgbouncer-config-{{ $index }}
        configMap:
          name: pgbouncer-config-{{ $index }}
{{- end }}
{{- end }}
      - name: cloudsql
        emptyDir: {}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- end }}
